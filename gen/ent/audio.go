// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shipherman/speech-to-text/gen/ent/audio"
	"github.com/shipherman/speech-to-text/gen/ent/user"
)

// Audio is the model entity for the Audio schema.
type Audio struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AudioQuery when eager-loading is set.
	Edges        AudioEdges `json:"edges"`
	user_audio   *int
	selectValues sql.SelectValues
}

// AudioEdges holds the relations/edges for other nodes in the graph.
type AudioEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AudioEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Audio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case audio.FieldID:
			values[i] = new(sql.NullInt64)
		case audio.FieldPath, audio.FieldHash, audio.FieldText:
			values[i] = new(sql.NullString)
		case audio.ForeignKeys[0]: // user_audio
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Audio fields.
func (a *Audio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case audio.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case audio.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				a.Path = value.String
			}
		case audio.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				a.Hash = value.String
			}
		case audio.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				a.Text = value.String
			}
		case audio.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_audio", value)
			} else if value.Valid {
				a.user_audio = new(int)
				*a.user_audio = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Audio.
// This includes values selected through modifiers, order, etc.
func (a *Audio) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Audio entity.
func (a *Audio) QueryUser() *UserQuery {
	return NewAudioClient(a.config).QueryUser(a)
}

// Update returns a builder for updating this Audio.
// Note that you need to call Audio.Unwrap() before calling this method if this Audio
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Audio) Update() *AudioUpdateOne {
	return NewAudioClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Audio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Audio) Unwrap() *Audio {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Audio is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Audio) String() string {
	var builder strings.Builder
	builder.WriteString("Audio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("path=")
	builder.WriteString(a.Path)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(a.Hash)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(a.Text)
	builder.WriteByte(')')
	return builder.String()
}

// Audios is a parsable slice of Audio.
type Audios []*Audio
