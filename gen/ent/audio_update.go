// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shipherman/speech-to-text/gen/ent/audio"
	"github.com/shipherman/speech-to-text/gen/ent/predicate"
	"github.com/shipherman/speech-to-text/gen/ent/user"
)

// AudioUpdate is the builder for updating Audio entities.
type AudioUpdate struct {
	config
	hooks    []Hook
	mutation *AudioMutation
}

// Where appends a list predicates to the AudioUpdate builder.
func (au *AudioUpdate) Where(ps ...predicate.Audio) *AudioUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetPath sets the "path" field.
func (au *AudioUpdate) SetPath(s string) *AudioUpdate {
	au.mutation.SetPath(s)
	return au
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (au *AudioUpdate) SetNillablePath(s *string) *AudioUpdate {
	if s != nil {
		au.SetPath(*s)
	}
	return au
}

// SetHash sets the "hash" field.
func (au *AudioUpdate) SetHash(s string) *AudioUpdate {
	au.mutation.SetHash(s)
	return au
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (au *AudioUpdate) SetNillableHash(s *string) *AudioUpdate {
	if s != nil {
		au.SetHash(*s)
	}
	return au
}

// SetText sets the "text" field.
func (au *AudioUpdate) SetText(s string) *AudioUpdate {
	au.mutation.SetText(s)
	return au
}

// SetNillableText sets the "text" field if the given value is not nil.
func (au *AudioUpdate) SetNillableText(s *string) *AudioUpdate {
	if s != nil {
		au.SetText(*s)
	}
	return au
}

// SetUserID sets the "user" edge to the User entity by ID.
func (au *AudioUpdate) SetUserID(id int) *AudioUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (au *AudioUpdate) SetNillableUserID(id *int) *AudioUpdate {
	if id != nil {
		au = au.SetUserID(*id)
	}
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AudioUpdate) SetUser(u *User) *AudioUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AudioMutation object of the builder.
func (au *AudioUpdate) Mutation() *AudioMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AudioUpdate) ClearUser() *AudioUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AudioUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AudioUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AudioUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AudioUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AudioUpdate) check() error {
	if v, ok := au.mutation.Path(); ok {
		if err := audio.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Audio.path": %w`, err)}
		}
	}
	if v, ok := au.mutation.Hash(); ok {
		if err := audio.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Audio.hash": %w`, err)}
		}
	}
	return nil
}

func (au *AudioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(audio.Table, audio.Columns, sqlgraph.NewFieldSpec(audio.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Path(); ok {
		_spec.SetField(audio.FieldPath, field.TypeString, value)
	}
	if value, ok := au.mutation.Hash(); ok {
		_spec.SetField(audio.FieldHash, field.TypeString, value)
	}
	if value, ok := au.mutation.Text(); ok {
		_spec.SetField(audio.FieldText, field.TypeString, value)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audio.UserTable,
			Columns: []string{audio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audio.UserTable,
			Columns: []string{audio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{audio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AudioUpdateOne is the builder for updating a single Audio entity.
type AudioUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AudioMutation
}

// SetPath sets the "path" field.
func (auo *AudioUpdateOne) SetPath(s string) *AudioUpdateOne {
	auo.mutation.SetPath(s)
	return auo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (auo *AudioUpdateOne) SetNillablePath(s *string) *AudioUpdateOne {
	if s != nil {
		auo.SetPath(*s)
	}
	return auo
}

// SetHash sets the "hash" field.
func (auo *AudioUpdateOne) SetHash(s string) *AudioUpdateOne {
	auo.mutation.SetHash(s)
	return auo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (auo *AudioUpdateOne) SetNillableHash(s *string) *AudioUpdateOne {
	if s != nil {
		auo.SetHash(*s)
	}
	return auo
}

// SetText sets the "text" field.
func (auo *AudioUpdateOne) SetText(s string) *AudioUpdateOne {
	auo.mutation.SetText(s)
	return auo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (auo *AudioUpdateOne) SetNillableText(s *string) *AudioUpdateOne {
	if s != nil {
		auo.SetText(*s)
	}
	return auo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (auo *AudioUpdateOne) SetUserID(id int) *AudioUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (auo *AudioUpdateOne) SetNillableUserID(id *int) *AudioUpdateOne {
	if id != nil {
		auo = auo.SetUserID(*id)
	}
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AudioUpdateOne) SetUser(u *User) *AudioUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AudioMutation object of the builder.
func (auo *AudioUpdateOne) Mutation() *AudioMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AudioUpdateOne) ClearUser() *AudioUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Where appends a list predicates to the AudioUpdate builder.
func (auo *AudioUpdateOne) Where(ps ...predicate.Audio) *AudioUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AudioUpdateOne) Select(field string, fields ...string) *AudioUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Audio entity.
func (auo *AudioUpdateOne) Save(ctx context.Context) (*Audio, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AudioUpdateOne) SaveX(ctx context.Context) *Audio {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AudioUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AudioUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AudioUpdateOne) check() error {
	if v, ok := auo.mutation.Path(); ok {
		if err := audio.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Audio.path": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Hash(); ok {
		if err := audio.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Audio.hash": %w`, err)}
		}
	}
	return nil
}

func (auo *AudioUpdateOne) sqlSave(ctx context.Context) (_node *Audio, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(audio.Table, audio.Columns, sqlgraph.NewFieldSpec(audio.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Audio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, audio.FieldID)
		for _, f := range fields {
			if !audio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != audio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Path(); ok {
		_spec.SetField(audio.FieldPath, field.TypeString, value)
	}
	if value, ok := auo.mutation.Hash(); ok {
		_spec.SetField(audio.FieldHash, field.TypeString, value)
	}
	if value, ok := auo.mutation.Text(); ok {
		_spec.SetField(audio.FieldText, field.TypeString, value)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audio.UserTable,
			Columns: []string{audio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audio.UserTable,
			Columns: []string{audio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Audio{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{audio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
