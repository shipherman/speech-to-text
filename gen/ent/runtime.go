// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/shipherman/speech-to-text/gen/ent/audio"
	"github.com/shipherman/speech-to-text/gen/ent/schema"
	"github.com/shipherman/speech-to-text/gen/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	audioFields := schema.Audio{}.Fields()
	_ = audioFields
	// audioDescPath is the schema descriptor for path field.
	audioDescPath := audioFields[0].Descriptor()
	// audio.PathValidator is a validator for the "path" field. It is called by the builders before save.
	audio.PathValidator = audioDescPath.Validators[0].(func(string) error)
	// audioDescHash is the schema descriptor for hash field.
	audioDescHash := audioFields[1].Descriptor()
	// audio.HashValidator is a validator for the "hash" field. It is called by the builders before save.
	audio.HashValidator = audioDescHash.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescLogin is the schema descriptor for login field.
	userDescLogin := userFields[1].Descriptor()
	// user.LoginValidator is a validator for the "login" field. It is called by the builders before save.
	user.LoginValidator = userDescLogin.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
}
