// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: stt/service/v1/service.proto

// Additional imports go here

package sttservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	STTService_TranscribeAudio_FullMethodName = "/stt.service.v1.STTService/TranscribeAudio"
)

// STTServiceClient is the client API for STTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type STTServiceClient interface {
	TranscribeAudio(ctx context.Context, in *Audio, opts ...grpc.CallOption) (STTService_TranscribeAudioClient, error)
}

type sTTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSTTServiceClient(cc grpc.ClientConnInterface) STTServiceClient {
	return &sTTServiceClient{cc}
}

func (c *sTTServiceClient) TranscribeAudio(ctx context.Context, in *Audio, opts ...grpc.CallOption) (STTService_TranscribeAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &STTService_ServiceDesc.Streams[0], STTService_TranscribeAudio_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sTTServiceTranscribeAudioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type STTService_TranscribeAudioClient interface {
	Recv() (*Text, error)
	grpc.ClientStream
}

type sTTServiceTranscribeAudioClient struct {
	grpc.ClientStream
}

func (x *sTTServiceTranscribeAudioClient) Recv() (*Text, error) {
	m := new(Text)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// STTServiceServer is the server API for STTService service.
// All implementations must embed UnimplementedSTTServiceServer
// for forward compatibility
type STTServiceServer interface {
	TranscribeAudio(*Audio, STTService_TranscribeAudioServer) error
	mustEmbedUnimplementedSTTServiceServer()
}

// UnimplementedSTTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSTTServiceServer struct {
}

func (UnimplementedSTTServiceServer) TranscribeAudio(*Audio, STTService_TranscribeAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method TranscribeAudio not implemented")
}
func (UnimplementedSTTServiceServer) mustEmbedUnimplementedSTTServiceServer() {}

// UnsafeSTTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to STTServiceServer will
// result in compilation errors.
type UnsafeSTTServiceServer interface {
	mustEmbedUnimplementedSTTServiceServer()
}

func RegisterSTTServiceServer(s grpc.ServiceRegistrar, srv STTServiceServer) {
	s.RegisterService(&STTService_ServiceDesc, srv)
}

func _STTService_TranscribeAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Audio)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(STTServiceServer).TranscribeAudio(m, &sTTServiceTranscribeAudioServer{stream})
}

type STTService_TranscribeAudioServer interface {
	Send(*Text) error
	grpc.ServerStream
}

type sTTServiceTranscribeAudioServer struct {
	grpc.ServerStream
}

func (x *sTTServiceTranscribeAudioServer) Send(m *Text) error {
	return x.ServerStream.SendMsg(m)
}

// STTService_ServiceDesc is the grpc.ServiceDesc for STTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var STTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stt.service.v1.STTService",
	HandlerType: (*STTServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TranscribeAudio",
			Handler:       _STTService_TranscribeAudio_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stt/service/v1/service.proto",
}
